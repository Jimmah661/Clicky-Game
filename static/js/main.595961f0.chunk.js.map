{"version":3,"sources":["components/Header.js","components/ImageCard.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","score","currentScore","topScore","ImageCard","shuffle","array","i","length","j","Math","floor","random","ponyList","this","ponies","result","cardStyle","backgroundImage","img","push","style","key","name","onClick","clickEvent","clicked","React","Component","Body","state","pony","newPonies","updateScore","forEach","element","resetScore","setState","Footer","App","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8iCAoBeA,MAlBf,SAAgBC,GACd,OACE,yBAAKC,UAAU,cACb,wBAAIA,UAAU,UAAd,0DAGA,wBAAIA,UAAU,oBACZ,wBAAIA,UAAU,mBAAd,qBACqBD,EAAME,MAAMC,cAEjC,wBAAIF,UAAU,mBAAd,iBACiBD,EAAME,MAAME,aC2BtBC,G,iNAnCbC,QAAU,SAAAC,GACR,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,G,wEASP,IANQ,IAAD,OAEHO,EAAWC,KAAKT,QAAQS,KAAKf,MAAMgB,QAEnCC,EAAS,GAJN,WAMET,GACP,IAAIU,EAAY,CACdC,gBAAiB,QAAUL,EAASN,GAAGY,IAAM,MAE/CH,EAAOI,KAEL,yBACEpB,UAAU,UACVqB,MAAOJ,EACPK,IAAKT,EAASN,GAAGgB,KACjBC,QAAS,kBACP,EAAKzB,MAAM0B,WAAWZ,EAASN,GAAGgB,KAAMV,EAASN,GAAGmB,cAXnDnB,EAAI,EAAGA,EAAIM,EAASL,OAAQD,IAAM,EAAlCA,GAiBT,OAAOS,M,GAjCaW,IAAMC,Y,OCmDfC,E,2MAjDbC,MAAQ,CACNf,OAAQA,G,EAKVU,WAAa,SAACM,EAAML,GAElB,IAAIM,EAAY,EAAKF,MAAMf,OAE3B,IAAK,IAAIR,KAAKyB,EAERA,EAAUzB,GAAGgB,OAASQ,IAAiC,IAAzBC,EAAUzB,GAAGmB,SAE7CM,EAAUzB,GAAGmB,SAAU,EAEvB,EAAK3B,MAAMkC,eAGJD,EAAUzB,GAAGgB,OAASQ,IAAiC,IAAzBC,EAAUzB,GAAGmB,UAGlDM,EAAUE,SAAQ,SAAAC,GAEhB,OADAA,EAAQT,SAAU,EACXS,KAGT,EAAKpC,MAAMqC,cAIf,EAAKC,SAAS,CAAEtB,OAAQiB,K,wEAIxB,OACE,6BACE,wGAIA,yBAAKhC,UAAU,iCACb,kBAAC,EAAD,CAAWe,OAAQD,KAAKgB,MAAMf,OAAQU,WAAYX,KAAKW,mB,GA3C9CE,IAAMC,W,MCUVU,MAXf,WACE,OACE,yBAAKtC,UAAU,UACb,8DACA,sGC4CSuC,G,iNA5CbT,MAAQ,CACN5B,aAAc,EACdC,SAAU,G,EAIZ8B,YAAc,WAER,EAAKH,MAAM5B,eAAiB,EAAK4B,MAAM3B,SACzC,EAAKkC,UAAS,SAAAG,GACZ,MAAO,CACLtC,aAAcsC,EAAUtC,aAAe,EACvCC,SAAUqC,EAAUrC,SAAW,MAKnC,EAAKkC,UAAS,SAAAG,GACZ,MAAO,CAAEtC,aAAcsC,EAAUtC,aAAe,O,EAOtDkC,WAAa,WAEX,EAAKC,SAAS,CAAEnC,aAAc,K,wEAI9B,OACE,6BACE,kBAAC,EAAD,CAAQD,MAAOa,KAAKgB,QACpB,kBAAC,EAAD,CACE5B,aAAcY,KAAKgB,MAAM5B,aACzB+B,YAAanB,KAAKmB,YAClBG,WAAYtB,KAAKsB,aAEnB,kBAAC,EAAD,W,GAxCUT,IAAMC,YCMJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.595961f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"header row\">\r\n      <h1 className=\"col-10\">\r\n        PonyClick, Don't ask me why, I just needed some images\r\n      </h1>\r\n      <ul className=\"list-group col-2\">\r\n        <li className=\"list-group-item\">\r\n          Current Score is: {props.score.currentScore}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Top score is: {props.score.topScore}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./ImageCard.css\";\r\n\r\nclass ImageCard extends React.Component {\r\n  // Defining my function to shuffle the pony list, this ensures a different order each time the component loads\r\n  shuffle = array => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  render() {\r\n    // Assign a copy of the pony list in a random order\r\n    var ponyList = this.shuffle(this.props.ponies);\r\n    // Define a result container to hold the generated div's\r\n    var result = [];\r\n    // Iterate through the randomised pony list\r\n    for (let i = 0; i < ponyList.length; i++) {\r\n      let cardStyle = {\r\n        backgroundImage: \"url('\" + ponyList[i].img + \"')\"\r\n      };\r\n      result.push(\r\n        // Push the new Div into the result array\r\n        <div\r\n          className=\"clicker\"\r\n          style={cardStyle}\r\n          key={ponyList[i].name}\r\n          onClick={() =>\r\n            this.props.clickEvent(ponyList[i].name, ponyList[i].clicked)\r\n          }\r\n        ></div>\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport ImageCard from \"./ImageCard\";\r\nimport ponies from \"./ponies.json\";\r\n\r\nclass Body extends React.Component {\r\n  state = {\r\n    ponies: ponies\r\n  };\r\n\r\n  // Function passed to each ImageCard, this will handle the logic of what happens when you click on one of the cards\r\n  // Handles differently if the cards clicked state is either True or False\r\n  clickEvent = (pony, clicked) => {\r\n    // Pass current state of ponies into a temporary variable\r\n    var newPonies = this.state.ponies;\r\n    // Run through the array of Ponies\r\n    for (var i in newPonies) {\r\n      // When it hits the current pony name and it hasn't been clicked before run this\r\n      if (newPonies[i].name === pony && newPonies[i].clicked === false) {\r\n        // Set the clicked value to true\r\n        newPonies[i].clicked = true;\r\n        // Update the score by 1\r\n        this.props.updateScore();\r\n      }\r\n      // if it hits the current pony name but it HAS been clicked before then run this\r\n      else if (newPonies[i].name === pony && newPonies[i].clicked === true) {\r\n        // run through the array and reset every clicked state to false\r\n        // See if you can find a better way to do this.\r\n        newPonies.forEach(element => {\r\n          element.clicked = false;\r\n          return element;\r\n        });\r\n        // Reset the current score to 0, leaves the topScore alone\r\n        this.props.resetScore();\r\n      }\r\n    }\r\n    // Update the current state with the new state of the ponies\r\n    this.setState({ ponies: newPonies });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>\r\n          Click the Ponies to earn points, Don't click the same pony more than\r\n          once\r\n        </p>\r\n        <div className=\"clickerContainer row clearfix\">\r\n          <ImageCard ponies={this.state.ponies} clickEvent={this.clickEvent} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>Thanks for checking out my page</p>\r\n      <p>\r\n        This page was made by James Rudd to test the React Javascript library\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    currentScore: 0,\n    topScore: 0\n  };\n\n  // Function will manage the updating of scores in the Current State\n  updateScore = () => {\n    // if the currentScore is equal to the topScore then update the topScore too\n    if (this.state.currentScore === this.state.topScore) {\n      this.setState(prevState => {\n        return {\n          currentScore: prevState.currentScore + 1,\n          topScore: prevState.topScore + 1\n        };\n      });\n      // Else only update the currenScore\n    } else {\n      this.setState(prevState => {\n        return { currentScore: prevState.currentScore + 1 };\n      });\n    }\n    // Set the current state currentScore to the previous state currentScore +1\n  };\n\n  // Will handle he reset on the event of a user making a mistake\n  resetScore = () => {\n    // Sets the current state Score to 0\n    this.setState({ currentScore: 0 });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state} />\n        <Body\n          currentScore={this.state.currentScore}\n          updateScore={this.updateScore}\n          resetScore={this.resetScore}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}